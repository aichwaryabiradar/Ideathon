rom the Jenkins dashboard, click New Item. 
Select Freestyle project (or Pipeline if you want to use pipeline scripts). 
Give the job a name (e.g., maven-build-project). 
2. Configure Git Repository: 
Under Source Code Management, select Git. 
Provide the repository URL (e.g., GitHub). 
Optionally, provide credentials if your repository is private. 
3. Add Build Step for Maven: 
Under Build, select Invoke top-level Maven targets. 
Set the Goals to clean install to clean the project and build the .jar (or .war, 
.ear) file. 
Ensure the Maven Version is set to the one configured earlier. 
Example: 
Bash 
clean install 
4. Add Post-Build Actions: 
You can configure post-build actions to archive the build artifacts (JAR/WAR 
file) so they can be used later in the pipeline. 
Example: 
Archive the artifact (e.g., target/*.jar or target/*.war). 
Select Archive the artifacts in the Post-build Actions section. 
In Files to archive, specify target/*.jar (or the appropriate artifact type). 
Step 3: Configure Jenkins Build Pipeline (CI Pipeline) 
1. Add Build Steps for Jenkins Pipeline (Optional): 
If you want to use a more advanced CI pipeline using a Jenkins Pipeline 
Script, select Pipeline instead of Freestyle Project when creating a new job. 
2. Configure the Pipeline Script: 
In the Pipeline section, you can define the Jenkinsfile (pipeline script) 
directly in Jenkins or store it in the Git repository.
Example Jenkinsfile (Declarative Pipeline): 
groovy 
pipeline { 
agent any 
tools { 
maven 'Maven-3.6.3' // Make sure Maven version is configured in Jenkins 
global tools 
} 
environment { 
DEPLOY_SERVER = "deploy@your-server.com" 
} 
stages { 
stage('Checkout') { 
steps { 
git 'https://github.com/your/repo.git' 
} 
} 
stage('Build') { 
steps { 
sh 'mvn clean install' // Build the Maven project 
} 
} 
stage('Archive Artifacts') { 
steps { 
archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true 
} 
} 
stage('Deploy') { 
steps { 
ansiblePlaybook playbook: 'deploy.yml', inventory: 'inventory.ini' // Run the 
Ansible 
playbook 
} 
} 
} 
post { 
success { 
echo 'Build and deploy completed successfully!' 
} 
failure { 
echo 'Build failed!' 
} 
} 
}
Step 4: Use Ansible to Deploy Artifacts from Jenkins 
1. Create an Ansible Playbook: Ansible will be used to deploy the artifact 
generated by Jenkins (e.g., a .jar file) to the target server(s). 
Create a file called deploy.yml (Ansible playbook) to deploy the artifact: 
yaml --- - name: Deploy artifact to server 
hosts: web_servers 
become: yes 
tasks: - name: Copy the artifact to the remote server 
copy: 
src: /path/to/your/artifact/target/my-app.jar # Jenkins workspace path 
dest: /opt/myapp/my-app.jar 
# Destination on the server - name: Start the application service 
systemd: 
name: myapp 
state: restarted 
enabled: yes - name: Ensure the application is running 
uri: 
url: "http://localhost:8080" 
status_code: 200 
This playbook copies the artifact (e.g., .jar file) to the remote server, restarts 
the application service, and checks if the application is running. 
2. Create an Ansible Inventory File: Define the hosts where the artifacts will 
be deployed. 
Create a file called inventory.ini (or inventory.yml if using YAML format): 
ini 
[web_servers] 
192.168.1.10 
192.168.1.11
3. Configure Ansible in Jenkins: 
In Jenkins, configure the Ansible Plugin with the path to your Ansible 
installation. 
You can specify the inventory.ini file in the pipeline and ensure Jenkins can 
run the playbook. 
Step 5: Run the Pipeline 
Now, you can trigger the pipeline manually or set up a webhook for 
automatic builds. 
Jenkins will: 
1. Checkout your project from Git. 
2. Build the Maven project and generate the artifact. 
3. Archive the artifact. 
4. Use Ansible to deploy the artifact to the remote servers.